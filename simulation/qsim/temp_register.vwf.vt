// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/11/2023 23:26:12"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          temp_register
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module temp_register_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg [7:0] data;
reg decrement;
reg increment;
reg load;
reg reset_n;
// wires                                               
wire negative;
wire positive;
wire zero;

// assign statements (if any)                          
temp_register i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.data(data),
	.decrement(decrement),
	.increment(increment),
	.load(load),
	.negative(negative),
	.positive(positive),
	.reset_n(reset_n),
	.zero(zero)
);
initial 
begin 
#1000000 $finish;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #5000 1'b1;
	#5000;
end 
// data[ 7 ]
initial
begin
	data[7] = 1'b1;
end 
// data[ 6 ]
initial
begin
	data[6] = 1'b1;
end 
// data[ 5 ]
initial
begin
	data[5] = 1'b0;
end 
// data[ 4 ]
initial
begin
	data[4] = 1'b1;
end 
// data[ 3 ]
initial
begin
	data[3] = 1'b0;
end 
// data[ 2 ]
initial
begin
	data[2] = 1'b1;
end 
// data[ 1 ]
initial
begin
	data[1] = 1'b1;
end 
// data[ 0 ]
initial
begin
	data[0] = 1'b0;
end 

// decrement
initial
begin
	decrement = 1'b0;
	decrement = #90000 1'b1;
	decrement = #60000 1'b0;
	decrement = #150000 1'b1;
	decrement = #30000 1'b0;
end 

// increment
initial
begin
	increment = 1'b0;
	increment = #10000 1'b1;
	increment = #40000 1'b0;
	increment = #130000 1'b1;
	increment = #90000 1'b0;
end 

// load
initial
begin
	load = 1'b0;
	load = #400000 1'b1;
	load = #60000 1'b0;
end 

// reset_n
initial
begin
	reset_n = 1'b1;
end 
endmodule

